plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.11'
    id 'io.spring.dependency-management' version '1.1.3'
    id "org.asciidoctor.jvm.convert" version '3.3.2'
}

group = 'com.luckkids'
version = '1.0.1-SNAPSHOT-' + new Date().format("yyyyMMddHHmmss", TimeZone.getTimeZone("GMT+9"))

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExt
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // lombok
    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok'

    // jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // QueryDSL Implementation
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // h2
    runtimeOnly 'com.h2database:h2'

    // mysql
    implementation group: 'mysql', name: 'mysql-connector-java', version: '8.0.32'

    // mariadb
    implementation 'org.mariadb.jdbc:mariadb-java-client'

    // etc
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

    // RestDocs
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    implementation 'org.springframework.boot:spring-boot-starter-mail'

    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.14.2'

    // slack
    implementation 'com.slack.api:slack-api-client:1.30.0'
}

tasks.named('test') {
    useJUnitPlatform()
}

jar {
    enabled = false
}

/**
 * QueryDSL Build Options
 */
def querydslDir = "src/main/generated"

sourceSets {
    main.java.srcDir querydslDir
}

tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

clean.doLast {
    file(querydslDir).deleteDir()
}

ext { // 전역 변수
    snippetsDir = file('build/generated-snippets')
}

test {
    outputs.dir snippetsDir
}

asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'

    sources { // 특정 파일만 html로 만든다.
        include("**/index.adoc")
    }
    baseDirFollowsSourceFile() // 다른 adoc 파일을 include 할 때 경로를 baseDir로 맞춘다.
    dependsOn test
}

bootJar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}") {
        into 'static/docs'
    }
}

// submodule
tasks.register('copySecret', Copy) {
    from './luckkids-server-submodule-config'
    include "application*.yml"
    into 'src/main/resources'
}

processResources {
    if (System.getenv('DEPLOY_CHECK') == "ok") {
        filesMatching('**/application.yml') {
            expand([
                    'MAIL_PASSWORD'   : System.getenv('MAIL_PASSWORD'),
                    'JWT_SECRET_KEY'  : System.getenv('JWT_SECRET_KEY'),
                    'DEV_DB_PASSWORD' : System.getenv('DEV_DB_PASSWORD'),
                    'PROD_DB_PASSWORD': System.getenv('PROD_DB_PASSWORD'),
                    'AES_KEY'         : System.getenv('AES_KEY')
            ])
        }
    }
}